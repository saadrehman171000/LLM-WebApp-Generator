interface CodeFile {
  path: string
  content: string
}

interface GeneratedCode {
  files: CodeFile[]
}

export async function downloadProject(generatedCode: GeneratedCode, prompt: string) {
  try {
    // Create a zip file with all the generated code
    const JSZip = (await import("jszip")).default
    const zip = new JSZip()

    // Create project structure
    const projectName = generateProjectName(prompt)

    // Add all files to the root of the zip
    generatedCode.files.forEach((file) => {
      zip.file(file.path, file.content)
    })

    // Add additional files if not present
    if (!generatedCode.files.find((f) => f.path === "README.md")) {
      zip.file("README.md", generateReadme(projectName, prompt))
    }

    if (!generatedCode.files.find((f) => f.path === ".env.example")) {
      zip.file(".env.example", generateEnvExample())
    }

    if (!generatedCode.files.find((f) => f.path === ".gitignore")) {
      zip.file(".gitignore", generateGitignore())
    }

    // Generate and download the zip file
    const content = await zip.generateAsync({ type: "blob" })
    const url = URL.createObjectURL(content)

    const link = document.createElement("a")
    link.href = url
    link.download = `${projectName}.zip`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)

    // Clean up the URL
    URL.revokeObjectURL(url)
  } catch (error) {
    console.error("Download error:", error)
    throw new Error("Failed to create download package")
  }
}

function generateProjectName(prompt: string): string {
  // Extract a project name from the prompt
  const words = prompt
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, "")
    .split(/\s+/)
    .filter((word) => word.length > 2)
    .slice(0, 3)

  return words.length > 0 ? words.join("-") : "generated-app"
}

function generateReadme(projectName: string, prompt: string): string {
  return `# ${projectName.charAt(0).toUpperCase() + projectName.slice(1).replace(/-/g, " ")}

## Description
${prompt}

## Getting Started

1. **Install dependencies:**
\`\`\`bash
npm install
\`\`\`

2. **Run the development server:**
\`\`\`bash
npm run dev
\`\`\`

3. **Open your browser:**
Navigate to [http://localhost:3000](http://localhost:3000)

## Project Structure

This is a full-stack Next.js application with the following structure:

- \`app/\` - Next.js app directory (pages, layouts, and API routes)
  - \`page.tsx\` - Main application page
  - \`layout.tsx\` - Root layout component
  - \`globals.css\` - Global styles
  - \`api/\` - API routes for backend functionality
- \`components/\` - Reusable React components
- \`lib/\` - Utility functions and configurations

## Tech Stack

- **Framework:** Next.js 14 (App Router)
- **Language:** TypeScript
- **Styling:** TailwindCSS
- **API:** Next.js API Routes

## Available Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm run start\` - Start production server
- \`npm run lint\` - Run ESLint

## API Endpoints

The application includes API routes in the \`app/api/\` directory:

- \`GET /api/health\` - Health check endpoint
- \`GET /api/data\` - Get application data
- \`POST /api/data\` - Create new data

## Customization

Feel free to modify the code to match your specific requirements. The generated code provides a solid foundation that you can build upon.

## Generated by AI Web App Generator

This project was generated using AI based on your prompt. You can modify and extend it as needed.

## Deployment

This Next.js application can be deployed to:

- **Vercel** (recommended): \`vercel --prod\`
- **Netlify**: Build command: \`npm run build\`, Publish directory: \`.next\`
- **Docker**: Use the included Dockerfile for containerized deployment

## Support

If you encounter any issues, please check the Next.js documentation or create an issue in your project repository.
`
}

function generateEnvExample(): string {
  return `# Environment Variables
# Copy this file to .env.local and fill in your values

# Database (if applicable)
# DATABASE_URL=your_database_url_here

# API Keys (if applicable)
# API_KEY=your_api_key_here

# Authentication (if applicable)
# NEXTAUTH_SECRET=your_nextauth_secret_here
# NEXTAUTH_URL=http://localhost:3000

# Other environment variables
# Add your environment variables here
`
}

function generateGitignore(): string {
  return `# Dependencies
node_modules/
/.pnp
.pnp.js

# Testing
/coverage

# Next.js
/.next/
/out/

# Production
/build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts
`
}
